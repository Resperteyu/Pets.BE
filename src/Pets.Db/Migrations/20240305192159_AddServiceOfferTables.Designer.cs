// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Pets.Db;

#nullable disable

namespace Pets.Db.Migrations
{
    [DbContext(typeof(PetsDbContext))]
    [Migration("20240305192159_AddServiceOfferTables")]
    partial class AddServiceOfferTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("af3dd336-0bbb-4c52-b8cc-b45f90517155"),
                            ConcurrencyStamp = "ada39352-2b42-4a6c-a073-fe0a60f30107",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("b82f0af8-26e8-4c3d-80d9-f9d85db6af10"),
                            ConcurrencyStamp = "b0411996-0450-4fb5-aa0f-ea0f1841c6aaba94c8a5-0198-4edf-9b2e-e2128a46457a",
                            Name = "PetOwner",
                            NormalizedName = "PETOWNER"
                        },
                        new
                        {
                            Id = new Guid("ba94c8a5-0198-4edf-9b2e-e2128a46457a"),
                            ConcurrencyStamp = "fe74e7b7-3ae7-4e32-9402-39545953b20a",
                            Name = "Shelter",
                            NormalizedName = "SHELTER"
                        },
                        new
                        {
                            Id = new Guid("d2631f51-a5a5-4413-afeb-8104e779b886"),
                            ConcurrencyStamp = "163b55d7-5be1-447b-b00a-4314f3e17b2c",
                            Name = "Professional",
                            NormalizedName = "PROFESSIONAL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PetDb.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Pets.Db.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("char(2)");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Line2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("CountryCode");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Pets.Db.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Pets.Db.Models.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("char(2)");

                    b.Property<string>("DialCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Code");

                    b.ToTable("Country", (string)null);

                    b.HasData(
                        new
                        {
                            Code = "AT",
                            DialCode = "+43",
                            Name = "Austria"
                        },
                        new
                        {
                            Code = "BE",
                            DialCode = "+32",
                            Name = "Belgium"
                        },
                        new
                        {
                            Code = "BG",
                            DialCode = "+359",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Code = "HR",
                            DialCode = "+385",
                            Name = "Croatia"
                        },
                        new
                        {
                            Code = "CY",
                            DialCode = "+357",
                            Name = "Cyprus"
                        },
                        new
                        {
                            Code = "CZ",
                            DialCode = "+420",
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Code = "DK",
                            DialCode = "+45",
                            Name = "Denmark"
                        },
                        new
                        {
                            Code = "EE",
                            DialCode = "+372",
                            Name = "Estonia"
                        },
                        new
                        {
                            Code = "FI",
                            DialCode = "+358",
                            Name = "Finland"
                        },
                        new
                        {
                            Code = "FR",
                            DialCode = "+33",
                            Name = "France"
                        },
                        new
                        {
                            Code = "DE",
                            DialCode = "+49",
                            Name = "Germany"
                        },
                        new
                        {
                            Code = "GR",
                            DialCode = "+30",
                            Name = "Greece"
                        },
                        new
                        {
                            Code = "HU",
                            DialCode = "+36",
                            Name = "Hungary"
                        },
                        new
                        {
                            Code = "IE",
                            DialCode = "+353",
                            Name = "Ireland"
                        },
                        new
                        {
                            Code = "IT",
                            DialCode = "+39",
                            Name = "Italy"
                        },
                        new
                        {
                            Code = "LV",
                            DialCode = "+371",
                            Name = "Latvia"
                        },
                        new
                        {
                            Code = "LT",
                            DialCode = "+370",
                            Name = "Lithuania"
                        },
                        new
                        {
                            Code = "LU",
                            DialCode = "+352",
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Code = "MT",
                            DialCode = "+356",
                            Name = "Malta"
                        },
                        new
                        {
                            Code = "NL",
                            DialCode = "+31",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Code = "PL",
                            DialCode = "+48",
                            Name = "Poland"
                        },
                        new
                        {
                            Code = "PT",
                            DialCode = "+351",
                            Name = "Portugal"
                        },
                        new
                        {
                            Code = "RO",
                            DialCode = "+40",
                            Name = "Romania"
                        },
                        new
                        {
                            Code = "SK",
                            DialCode = "+421",
                            Name = "Slovakia"
                        },
                        new
                        {
                            Code = "SI",
                            DialCode = "+386",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Code = "ES",
                            DialCode = "+34",
                            Name = "Spain"
                        },
                        new
                        {
                            Code = "SE",
                            DialCode = "+46",
                            Name = "Sweden"
                        });
                });

            modelBuilder.Entity("Pets.Db.Models.Litter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("BreedId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<Guid>("FatherPetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MotherPetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Available");

                    b.HasIndex("BreedId");

                    b.HasIndex("CreationDate");

                    b.HasIndex("FatherPetId");

                    b.HasIndex("MotherPetId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Litter", (string)null);
                });

            modelBuilder.Entity("Pets.Db.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<Point>("GeoLocation")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("Pets.Db.Models.MateRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AmountAgreement")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BreedingPlaceAgreement")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("LitterSplitAgreement")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte>("MateRequestStateId")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("PetMateOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PetMateProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PetOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PetProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Response")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.HasKey("Id");

                    b.HasIndex("MateRequestStateId");

                    b.HasIndex("PetMateOwnerId");

                    b.HasIndex("PetMateProfileId");

                    b.HasIndex("PetOwnerId");

                    b.HasIndex("PetProfileId");

                    b.ToTable("MateRequest", (string)null);
                });

            modelBuilder.Entity("Pets.Db.Models.MateRequestState", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("MateRequestState", (string)null);
                });

            modelBuilder.Entity("Pets.Db.Models.PetBreed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte>("TypeId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("PetBreed", (string)null);
                });

            modelBuilder.Entity("Pets.Db.Models.PetProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AvailableForBreeding")
                        .HasColumnType("bit");

                    b.Property<int>("BreedId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValue(new DateTime(2024, 3, 5, 19, 21, 59, 338, DateTimeKind.Utc).AddTicks(3576));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("ForAdoption")
                        .HasColumnType("bit");

                    b.Property<bool>("ForSale")
                        .HasColumnType("bit");

                    b.Property<bool>("Missing")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("OwnerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<byte>("SexId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("CreationDate");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SexId");

                    b.ToTable("PetProfile", (string)null);
                });

            modelBuilder.Entity("Pets.Db.Models.PetType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("PetType", (string)null);
                });

            modelBuilder.Entity("Pets.Db.Models.ServiceOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("AdditionalPetRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<bool>("ForCats")
                        .HasColumnType("bit");

                    b.Property<bool>("ForDogs")
                        .HasColumnType("bit");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PeakRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("ServiceTypeId")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Active");

                    b.HasIndex("CreationDate");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceOffer", (string)null);
                });

            modelBuilder.Entity("Pets.Db.Models.ServiceType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceType", (string)null);
                });

            modelBuilder.Entity("Pets.Db.Models.Sex", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Sex", (string)null);
                });

            modelBuilder.Entity("Pets.Db.Models.UserProfileInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutMe")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid?>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfilePhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("UserProfileInfo", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Pets.Db.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Pets.Db.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pets.Db.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Pets.Db.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetDb.Models.RefreshToken", b =>
                {
                    b.HasOne("Pets.Db.Models.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pets.Db.Models.Address", b =>
                {
                    b.HasOne("Pets.Db.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Address")
                        .HasForeignKey("Pets.Db.Models.Address", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pets.Db.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Pets.Db.Models.Litter", b =>
                {
                    b.HasOne("Pets.Db.Models.PetBreed", "Breed")
                        .WithMany("Litters")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pets.Db.Models.PetProfile", "FatherPetProfile")
                        .WithMany()
                        .HasForeignKey("FatherPetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pets.Db.Models.PetProfile", "MotherPetProfile")
                        .WithMany()
                        .HasForeignKey("MotherPetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pets.Db.Models.ApplicationUser", "Owner")
                        .WithMany("Litters")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("FatherPetProfile");

                    b.Navigation("MotherPetProfile");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Pets.Db.Models.Location", b =>
                {
                    b.HasOne("Pets.Db.Models.Address", "Address")
                        .WithOne("Location")
                        .HasForeignKey("Pets.Db.Models.Location", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Pets.Db.Models.MateRequest", b =>
                {
                    b.HasOne("Pets.Db.Models.MateRequestState", "MateRequestState")
                        .WithMany("MateRequests")
                        .HasForeignKey("MateRequestStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pets.Db.Models.PetProfile", "PetMateProfile")
                        .WithMany()
                        .HasForeignKey("PetMateProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pets.Db.Models.PetProfile", "PetProfile")
                        .WithMany()
                        .HasForeignKey("PetProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MateRequestState");

                    b.Navigation("PetMateProfile");

                    b.Navigation("PetProfile");
                });

            modelBuilder.Entity("Pets.Db.Models.PetBreed", b =>
                {
                    b.HasOne("Pets.Db.Models.PetType", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pets.Db.Models.PetProfile", b =>
                {
                    b.HasOne("Pets.Db.Models.PetBreed", "Breed")
                        .WithMany("PetProfiles")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pets.Db.Models.ApplicationUser", "Owner")
                        .WithMany("PetProfiles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pets.Db.Models.Sex", "Sex")
                        .WithMany("PetProfiles")
                        .HasForeignKey("SexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Owner");

                    b.Navigation("Sex");
                });

            modelBuilder.Entity("Pets.Db.Models.ServiceOffer", b =>
                {
                    b.HasOne("Pets.Db.Models.ServiceType", "ServiceType")
                        .WithMany("ServiceOffers")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pets.Db.Models.ApplicationUser", "User")
                        .WithMany("ServiceOffers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pets.Db.Models.UserProfileInfo", b =>
                {
                    b.HasOne("Pets.Db.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("UserProfileInfo")
                        .HasForeignKey("Pets.Db.Models.UserProfileInfo", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Pets.Db.Models.Address", b =>
                {
                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("Pets.Db.Models.ApplicationUser", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Litters");

                    b.Navigation("PetProfiles");

                    b.Navigation("RefreshTokens");

                    b.Navigation("ServiceOffers");

                    b.Navigation("UserProfileInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Pets.Db.Models.MateRequestState", b =>
                {
                    b.Navigation("MateRequests");
                });

            modelBuilder.Entity("Pets.Db.Models.PetBreed", b =>
                {
                    b.Navigation("Litters");

                    b.Navigation("PetProfiles");
                });

            modelBuilder.Entity("Pets.Db.Models.ServiceType", b =>
                {
                    b.Navigation("ServiceOffers");
                });

            modelBuilder.Entity("Pets.Db.Models.Sex", b =>
                {
                    b.Navigation("PetProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
